{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Input space optimization\n",
    "\n",
    "In this toy example, we directly optimize point configurations in 2D. This is motivated by the following paper:\n",
    "\n",
    "**A Topology Layer for Machine Learning**     \n",
    "R. Br√ºel-Gabrielsson, B. J. Nelson, A. Dwaraknath, P. Skraba, L. J. Guibas and G. Carlsson     \n",
    "arXiv, 2019    \n",
    "[PDF](https://arxiv.org/abs/1905.12200)\n",
    "\n",
    "**Note**: In all the following examples, we use the $l_1$ norm during Vietoris-Rips PH computation (whereas the paper mentioned above uses $l_2$).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The autoreload extension is already loaded. To reload it, use:\n",
      "  %reload_ext autoreload\n"
     ]
    }
   ],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import matplotlib.pyplot as plt\n",
    "from chofer_torchex.pershom import vr_persistence_l1\n",
    "\n",
    "device = \"cuda\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data\n",
    "\n",
    "The toy data generated for this example is sampled from a 2D uniform distribution in $[0,1]^2$. In particular, we sample 300 points."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "np.random.seed(1234)\n",
    "toy_data = np.random.rand(300, 2)\n",
    "\n",
    "plt.figure()\n",
    "plt.plot(toy_data[:, 0], toy_data[:, 1], 'b.', markersize=3)\n",
    "plt.title('Toy data');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 1\n",
    "\n",
    "**Task**: Optimize for uniform distribution of H0 lifetimes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration:   1 | Loss: 15.35\n",
      "Iteration:  20 | Loss: 5.85\n",
      "Iteration:  40 | Loss: 3.74\n",
      "Iteration:  60 | Loss: 2.66\n",
      "Iteration:  80 | Loss: 2.00\n",
      "Iteration: 100 | Loss: 1.69\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f64d4ec7b70>]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X = torch.tensor(\n",
    "    toy_data, \n",
    "    device=device, \n",
    "    requires_grad=True)\n",
    "\n",
    "opt = torch.optim.Adam([X], lr=0.01)\n",
    "\n",
    "for i in range(1,100+1):\n",
    "    pers = vr_persistence_l1(X, 1, 0)\n",
    "    h_0 = pers[0][0]\n",
    "    \n",
    "    lt = h_0[:, 1] # H0 lifetimes\n",
    "    loss = (lt - 0.1).abs().sum()\n",
    "    \n",
    "    if i % 20 == 0 or i == 1:\n",
    "        print('Iteration: {:3d} | Loss: {:.2f}'.format(i, loss.item()))\n",
    "    \n",
    "    opt.zero_grad()\n",
    "    loss.backward()\n",
    "    opt.step()    \n",
    "    \n",
    "X = X.cpu().detach().numpy()\n",
    "plt.figure()\n",
    "plt.plot(X[:, 0], X[:, 1], 'b.');\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 2\n",
    "\n",
    "**Task**: Minimize (non-essential) H0 lifetimes (i.e., a slightly modified as in *Br√ºel-Gabrielsson et al., arXiv 2019, Fig. 1 top-right)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration:   1 | Loss: 14.74\n",
      "Iteration:  20 | Loss: 7.25\n",
      "Iteration:  40 | Loss: 5.65\n",
      "Iteration:  60 | Loss: 4.87\n",
      "Iteration:  80 | Loss: 4.43\n",
      "Iteration: 100 | Loss: 4.10\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f64d4f149b0>]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X = torch.tensor(\n",
    "    toy_data, \n",
    "    device=device, \n",
    "    requires_grad=True)\n",
    "\n",
    "opt = torch.optim.Adam([X], lr=0.01)\n",
    "\n",
    "for i in range(1,100+1):\n",
    "    pers = vr_persistence_l1(X, 1, 0)\n",
    "    h_0 = pers[0][0]\n",
    "    \n",
    "    lt = h_0[:, 1] # non-essential H0 lifetimes\n",
    "    loss = lt.sum()\n",
    "    \n",
    "    if i % 20 == 0 or i == 1:\n",
    "        print('Iteration: {:3d} | Loss: {:.2f}'.format(i, loss.item()))\n",
    "    \n",
    "    opt.zero_grad()\n",
    "    loss.backward()\n",
    "    opt.step()    \n",
    "    \n",
    "X = X.cpu().detach().numpy()\n",
    "plt.figure()\n",
    "plt.plot(X[:, 0], X[:, 1], 'b.');\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 3\n",
    "\n",
    "**Task**: Increase (non-essential) H0 lifetimes (i.e., a slightly modified version as in *Br√ºel-Gabrielsson et al., arXiv 2019, Fig. 1 top-left)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration:   1 | Loss: -14.74\n",
      "Iteration:  20 | Loss: -26.88\n",
      "Iteration:  40 | Loss: -33.20\n",
      "Iteration:  60 | Loss: -38.44\n",
      "Iteration:  80 | Loss: -43.29\n",
      "Iteration: 100 | Loss: -47.90\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X = torch.tensor(\n",
    "    toy_data, \n",
    "    device=device, \n",
    "    requires_grad=True)\n",
    "\n",
    "opt = torch.optim.Adam([X], lr=0.01)\n",
    "\n",
    "for i in range(1,100+1):\n",
    "    pers = vr_persistence_l1(X, 1, 0)\n",
    "    h_0 = pers[0][0]\n",
    "    \n",
    "    lt = -h_0[:, 1] # non-essential H0 lifetimes\n",
    "    loss = lt.sum()\n",
    "    \n",
    "    if i % 20 == 0 or i == 1:\n",
    "        print('Iteration: {:3d} | Loss: {:.2f}'.format(i, loss.item()))\n",
    "    \n",
    "    opt.zero_grad()\n",
    "    loss.backward()\n",
    "    opt.step()    \n",
    "    \n",
    "X = X.cpu().detach().numpy()\n",
    "plt.figure()\n",
    "plt.plot(X[:, 0], X[:, 1], 'b.');\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
